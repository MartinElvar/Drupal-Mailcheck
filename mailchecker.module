<?php

/**
 * Implements hook_menu().
 */
function mailchecker_menu() {
  $items = array();

  $items['admin/settings/mailchecker'] = array(
    'title' =>  'Mailchecker configuration',
    'description' => 'Adjust mailchecker settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailchecker_conf'),
    'access arguments' => array('access administration page'),
  );

  return $items;
}

/**
 * Settings form definition
 * @return type 
 */
function mailchecker_conf() {
  $default_conf = variable_get('mailchecker_conf', array());
   
  $form = array();
  
  $form['general'] = array(
    '#title' => t('General'),
    '#type' => 'fieldset',
  );

  $form['general']['path'] = array(
    '#title' => t('Source path'),
    '#description' => t('The source path to "jquery.mailcheck.min.js".'),
    '#type' => 'textfield',
    '#default_value' => $default_conf['path'],
    '#required' => TRUE,
  );

  $form['general']['domains'] = array(
    '#title' => t('Domains'),
    '#description' => t('If we forgot any domains, you can add them here. Seperate with a comma.'),
    '#default_value' => implode(', ', $default_conf['domains']),
    '#type' => 'textarea',
    '#rows' => 3,
    '#required' => TRUE,
  );

  $form['general']['message'] = array(
    '#title' => t('Message'),
    '#description' => t('Change the message which meets the users. <br/>[corrected-mail] is replaced by the typo corrected mail'),
    '#type' => 'textarea',
    '#rows' => 6,
    '#default_value' => $default_conf['message'],
    '#required' => TRUE,
  );

  if(module_exists('webform')) {
    $form['general']['webform'] = array(
      '#title' => t('Mailchecker on webform'),
      '#type' => 'checkbox',
      '#default_value' => $default_conf['webform'],
    );
  }

  $form['general']['show_type'] = array(
    '#title' => t('Show message in'),
    '#type' => 'select',
    '#options' => array(
      0 => t('Prefix'),
      1 => t('Description'),
      2 => t('Suffix'),
    ),
    '#default_value' => $default_conf['show_type'],
  );

  $form['general']['gestures'] = array(
    '#title' => t('Gestures'),
    '#type' => 'fieldset',
  );

  $form['general']['gestures']['lock'] = array(
    '#title' => t('Submit Lock'),
    '#description' => t('Locks the submit button for one second, on typo.'),
    '#type' => 'checkbox',
    '#default_value' => $default_conf['lock'],
  );


  $form['regform'] = array(
    '#title' => t('Register form'),
    '#type' => 'fieldset',
  );
  
  $form['regform']['register'] = array(
    '#title' => t('Mailchecker on register form'),
    '#type' => 'checkbox',
    '#default_value' => $default_conf['register']['show'],
  );

  $form['regform']['reglock'] = array(
    '#title' => t('Submit Lock'),
    '#description' => t('Disable submit button for one second, when a typo occurs'),
    '#type' => 'checkbox',
    '#default_value' => $default_conf['register']['lock'],
  );

  /****
  * This needs some investigations first, on standby.
  $form['where']['login'] = array(
    '#title' => t('Check email on login form'),
    '#description' => t('In case you use email instead of username, for login.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('mailchecker_onlogin'),
  );
  ****/

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('save'),
  );

  return $form;
}

/**
 * Implements _validate function for mailchecker_conf
 * @param type $form
 * @param type $form_state 
 */
function mailchecker_conf_validate($form, &$form_state) {
  //Set error if path is
  if (!file_exists(_helper_get_base_dir() . $form_state['values']['path'])) {
    form_set_error('path', t('Source path was not found.'));
  }
  
  if (count(explode(',', str_replace(' ', '', $form_state['values']['domains']))) == 0) {
    form_set_error('domains', 'You must include at least one domain.');
  }
}

/**
 * Implements _submit function for mailchecker_conf
 * @param type $form
 * @param type $form_state 
 */
function mailchecker_conf_submit($form, &$form_state) {
  // Save general settings
  $conf = array();
  
  $conf['path'] = $form_state['values']['path'];

  $conf['domains'] = explode(',', str_replace(' ', '', $form_state['values']['domains']));
  //variable_set('mailchecker_onlogin', $form_state['values']['login']);  
  $conf['message'] = $form_state['values']['message'];
  
  if (array_key_exists('webform', $form_state['values'])) {
    $conf['webform'] = $form_state['values']['webform'];
  } else {
    $conf['webform'] = 0; //default value
  }
  
  $conf['show_type'] = $form_state['values']['show_type'];

  // Save gestures
  $conf['lock'] = $form_state['values']['lock'];

  // Save register form settings
  $conf['register']['show'] = $form_state['values']['register'];
  $conf['register']['lock'] = $form_state['values']['reglock'];

  variable_set('mailchecker_conf', $conf);
  drupal_set_message("Configuration saved", "status");
}

/**
 * Load 
 * @staticvar boolean $loaded
 * @param type $show_in_des
 * @param type $lock 
 */
function load_mailcheck($show_in_des = FALSE, $lock = FALSE) {
  static $loaded = FALSE;

  if(!$loaded) {
    // Load Files
    $conf = variable_get('mailchecker_conf', array());
    
    if (file_exists($conf['path'])) {
      drupal_add_js($conf['path']);
      drupal_add_js(drupal_get_path('module', 'mailchecker') . '/js/mailchecker.js');
      drupal_add_css(drupal_get_path('module', 'mailchecker') . '/css/mailchecker.css');

      // Inject settings
      $conf = variable_get('mailchecker_conf', array());
      $settings = array('mailcheck' => array(
        'domains' => $conf['domains'],
        'message' => $conf['message'],
        'show_in_des' => $show_in_des,
        'lock' => $lock
      ));

      drupal_add_js($settings, 'setting');
    }
  }
}

/**
 * Implements hook_form_alter().
 */

function mailchecker_form_alter(&$form, &$form_state, $form_id) {
  
  // Load config
  $conf = variable_get('mailchecker_conf', array());

  // Check if we are on a webform email field
  $formInArr = explode("_", $form_id);

  if($formInArr[0] == 'webform' && $conf['webform']) {

    foreach($form['submitted'] as &$newform) {
      
      if($newform['#type'] != "webform_email") continue;

      $newform['#attributes'] = array('class' => array('mailcheck'));
      $show_type = $conf['show_type'];
      if($show_type == 0) {
        $newform['#prefix'] = '<div class="mc-prefix mailcheck-action"></div>';
      }elseif($show_type == 1) {
        $in_des = TRUE;
      }else {
        $newform['#suffix'] = '<div class="mc-suffix mailcheck-action"></div>';
      }

      load_mailcheck(isset($in_des), $conf['register']['lock']);
    }
  }    

  // Check if we are on the right form, also check for settings 
  if($form_id == 'user_register' && $conf['register']['show']) {

    $form['mail']['#attributes'] = array('class' => 'mailcheck');
    $show_type = $conf['show_type'];
    if($show_type == 0) {
      $form['mail']['#prefix'] = '<div class="mc-prefix mailcheck-action"></div>';
    }elseif($show_type == 1) {
      $in_des = TRUE;
    }else {
      $form['mail']['#suffix'] = '<div class="mc-suffix mailcheck-action"></div>';
    }

    load_mailcheck(isset($in_des), $conf['register']['lock']);
  }
}
